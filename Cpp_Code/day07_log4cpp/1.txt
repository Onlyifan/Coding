在C++编程语言中, 一般来说, 类的私有成员只能在类的内部访问, 在类之外是不能访问它们的.但“友元”这种特殊的关系打破了这一封装性. 将其他类或函数设置为该类的友元, 那么友元类/函数就可以在该类之外访问内部的私有成员了.友元的存在形式主要有三种:1  普通函数: 是指在类的定义中, 通过friend关键字声明的非成员函数. 一旦一个普通函数被声明为类的友元, 这个函数就能直接访问该类的所有成员, 包括私有和保护成员, 就像它是类的成员函数一样.2  成员函数: 通过在类A中声明类B的某个成员函数为友元函数, 可以让类B的这个成员函数访问类A的私有和保护成员.3  友元类: 是指在一个类中声明另一个类作为友元, 这样友元类的所有成员函数都能访问原类的私有和保护成员.友元的特点:1  打破封装:   友元机制突破了面向对象原则中的封装性, 因为它允许非成员函数或外部类访问和修改内部类的私有成员.2  单向性:   友元关系是单向的. 即如果类A声明类B为友元, 则类B可以访问类A的私有和保护成员. 但类A还是不能访问类B的这些成员.3  非继承性:   友元关系不能被继承. 也就是说, 如果类B是类A的友元, 那么B的派生类并不自动成为A的友元.4  非传递型:   友元关系不具备传递性. A是B的友元类, B是C的友元类, 不能推断出A是C的友元类.
